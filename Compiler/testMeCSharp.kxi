/*
    Author: Gage Glenn
 */

using System;
using System.Collections.Generic;
using System.IO;

namespace vm
{
    class Program
    {
        static void Main(string[] args)
        {
            // Instantiate Memory
            VirtualMemory m = new VirtualMemory();
            Dictionary<string, int> intMemLocs = new Dictionary<string, int>(); // List of int memory names + counters
            Dictionary<string, int> charMemLocs = new Dictionary<string, int>(); // List of char memory names + counters
            // Get assembly file for first pass
            String inFile = "proj1.asm";
            // Initialize Registers
            List<byte[]> registers = new List<byte[]>();

            byte[] R0 = new byte[4];
            byte[] R1 = new byte[4];
            byte[] R2 = new byte[4];
            byte[] R3 = new byte[4];

            registers.Add(R0);
            registers.Add(R1);
            registers.Add(R2);
            registers.Add(R3);

            if (args.Length > 0)
            {
                inFile = args[0];
            }
            else if (File.Exists("proj1.asm"))
            {

            }
            else
            {
                Console.WriteLine("No assembly file found - exitting");
                return;
            }

            StreamReader reader = new StreamReader(inFile);

            /*
                First Pass
             */
            bool dataFlag = true; // swap to true when we finish reading in our data
            while (dataFlag)
            {
                string assemblerLine = reader.ReadLine();
                string[] splitLine = assemblerLine.Split(' ');
                // if our line is less than 3 in array length, it is probably a command                
                if (splitLine.Length <= 2)
                {
                    dataFlag = false;
                    break;
                }
                for (int i = 0; i < splitLine.Length - 2; i++)
                {
                    if (isInstruct(splitLine[i]))
                    {
                        dataFlag = false;
                        break;
                    }
                    else if (isInstruct(splitLine[i + 1]))
                    {
                        dataFlag = false;
                        break;
                    }
                    else
                    {
                        // if we have a name for the info going in make sure we store the info AND it's location
                        if (splitLine[i] != ".BYTE" && splitLine[i] != ".INT")
                        {
                            if (splitLine[i + 1] == ".BYT")
                            {
                                string s = splitLine[i + 2];
                                s = s.Trim('\'');
                                s = s.Trim('\\');
                                m.storeChar(s, m.counter);

                                charMemLocs.Add(splitLine[i], m.counter);
                                m.counter++;
                                break;
                            }
                            else if (splitLine[i + 1] == ".INT")
                            {
                                string s = splitLine[i + 2];
                                s.Replace("'", "");
                                m.storeInt(Convert.ToInt32(s), m.counter);

                                intMemLocs.Add(splitLine[i], m.counter);
                                m.counter += 4;
                                break;
                            }
                        }
                        else
                        {
                            if (splitLine[i] == ".BYT")
                            {
                                string s = splitLine[i + 1];
                                s.Replace("'", "");
                                m.storeChar(s, m.counter);
                                m.counter++;
                                break;
                            }
                            else if (splitLine[i] == ".INT")
                            {
                                string s = splitLine[i + 1];
                                s.Replace("'", "");
                                m.storeInt(Convert.ToInt32(s), m.counter);
                                m.counter += 4;
                                break;
                            }
                        }
                    }
                }
            }
            /*
                Second Pass
             */
            bool trapZed = true;
            reader = new StreamReader(inFile);

            while (trapZed)
            {

                string assemblerLine = reader.ReadLine();
                string[] splitLine = assemblerLine.Split(' ');
                if (splitLine.Length <= 1)
                {
                    continue;
                }
                for (int i = 0; i < splitLine.Length - 1; i++)
                {
                    int regNum;
                    string s;
                    int destReg = 0;
                    int sourceReg = 0;
                    int op = 0;
                    byte[] opArr;

                    switch (splitLine[i])
                    {
                        case "ADD":

                            // Get Destination Register
                            s = splitLine[i + 1].Trim('R');
                            s = s.Trim(',');
                            destReg = Convert.ToInt32(s);

                            // Get Source Register
                            s = splitLine[i + 2].Trim('R');
                            s = s.Trim(',');
                            sourceReg = Convert.ToInt32(s);

                            op = BitConverter.ToInt32(registers[destReg]) + BitConverter.ToInt32(registers[sourceReg]);
                            opArr = BitConverter.GetBytes(op);

                            for (int j = 0; j < 4; j++)
                            {
                                registers[destReg][j] = opArr[j];
                            }

                            continue;
                        case "SUB":

                            // Get Destination Register
                            s = splitLine[i + 1].Trim('R');
                            s = s.Trim(',');
                            destReg = Convert.ToInt32(s);

                            // Get Source Register
                            s = splitLine[i + 2].Trim('R');
                            s = s.Trim(',');
                            sourceReg = Convert.ToInt32(s);

                            op = BitConverter.ToInt32(registers[destReg]) - BitConverter.ToInt32(registers[sourceReg]);
                            opArr = BitConverter.GetBytes(op);

                            for (int j = 0; j < 4; j++)
                            {
                                registers[destReg][j] = opArr[j];
                            }

                            continue;
                        case "MUL":
                            // Get Destination Register
                            s = splitLine[i + 1].Trim('R');
                            s = s.Trim(',');
                            destReg = Convert.ToInt32(s);

                            // Get Source Register
                            s = splitLine[i + 2].Trim('R');
                            s = s.Trim(',');
                            sourceReg = Convert.ToInt32(s);

                            op = BitConverter.ToInt32(registers[destReg]) * BitConverter.ToInt32(registers[sourceReg]);
                            opArr = BitConverter.GetBytes(op);

                            for (int j = 0; j < 4; j++)
                            {
                                registers[destReg][j] = opArr[j];
                            }
                            continue;
                        case "MOV":
                            // Get Destination Register
                            s = splitLine[i + 1].Trim('R');
                            s = s.Trim(',');
                            destReg = Convert.ToInt32(s);

                            // Get Source Register
                            s = splitLine[i + 2].Trim('R');
                            s = s.Trim(',');
                            sourceReg = Convert.ToInt32(s);

                            for (int j = 0; j < 4; j++)
                            {
                                registers[destReg][j] = registers[sourceReg][j];
                            }
                            continue;
                        case "DIV":
                            // Get Destination Register
                            s = splitLine[i + 1].Trim('R');
                            s = s.Trim(',');
                            destReg = Convert.ToInt32(s);

                            // Get Source Register
                            s = splitLine[i + 2].Trim('R');
                            s = s.Trim(',');
                            sourceReg = Convert.ToInt32(s);

                            op = BitConverter.ToInt32(registers[destReg]) / BitConverter.ToInt32(registers[sourceReg]);
                            opArr = BitConverter.GetBytes(op);

                            for (int j = 0; j < 4; j++)
                            {
                                registers[destReg][j] = opArr[j];
                            }
                            continue;
                        case "LDR":
                            // Get Operating Register
                            s = splitLine[i + 1].Trim('R');
                            s = s.Trim(',');
                            regNum = Convert.ToInt32(s);
                            for (int j = 0; j < 4; j++)
                            {
                                registers[regNum][j] = 0;
                            }
                            // Set the REgister
                            if (intMemLocs.ContainsKey(splitLine[i + 2]))
                            {
                                int x = intMemLocs.GetValueOrDefault(splitLine[i + 2]);
                                for (int j = 0; j < 4; j++)
                                {
                                    registers[regNum][j] = m.backingArr[x + j];
                                }
                            }
                            continue;
                        case "LDB":
                            // Get Operating Register
                            s = splitLine[i + 1].Trim('R');
                            s = s.Trim(',');
                            regNum = Convert.ToInt32(s);
                            for (int j = 0; j < 4; j++)
                            {
                                registers[regNum][j] = 0;
                            }
                            // Set the REgister
                            if (charMemLocs.ContainsKey(splitLine[i + 2]))
                            {
                                int x = charMemLocs.GetValueOrDefault(splitLine[i + 2]);
                                registers[regNum][0] = m.backingArr[x];
                            }
                            continue;
                        case "TRP":
                            // Trap 1 Handled
                            if (Convert.ToInt32(splitLine[i + 1]) == 1)
                            {
                                int x = BitConverter.ToInt32(registers[3]);
                                Console.Write(x);
                                continue;
                            }
                            // Trap 3 Handled
                            if (Convert.ToInt32(splitLine[i + 1]) == 3)
                            {
                                char x = BitConverter.ToChar(registers[3]);
                                Console.Write(x);
                                continue;
                            }
                            // Trap 0 Handled
                            if (Convert.ToInt32(splitLine[i + 1]) == 0)
                            {
                                trapZed = false;
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        public static bool isInstruct(string s)
        {
            if (s.ToUpper() == "LDR" || s.ToUpper() == "ADD" || s.ToUpper() == "TRP" || s.ToUpper() == "ADD" || s.ToUpper() == "MUL" || s.ToUpper() == "DIV" || s.ToUpper() == "SUB" || s.ToUpper() == "MOV")
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}
