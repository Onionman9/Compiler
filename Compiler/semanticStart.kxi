class test1
{
	test1(int constX)
	{
	
	}
}
class c1
{
	// int x = 0; // this fails for lack of a modifier
	public int outOfScope = 0;
	public c2 stored;
	public c2 f()
	{
		c2 x;
		return x = new c2(2);
	}

	public void mult(int x)
	{
		this.outOfScope = x;
	}
	public int x1;
}

class Cat 
{ // no access modifier have been written
	public int i;   
	public int[] ii;
	public Cat d;
	public char bb;
	// public char i;
	public int doThis(int a, int b, char c)
	{
		return i;
	}
    public int f() {}
	public void g(int i, Cat y) // note: I changed this to have public after the error was found
	{ 
		// int i; // param i and local i are duplicates
		int[] ii; // found misplaced array bars
		Cat x = y;
		i = f(); // f does not exist
		// ii[0] = i[7];
		//true = false; // caught error
		// 1 = 2;
		i = this.i; // this is valid
		// null = this; // this error was caught
		return;  // this is valid
		ii = ii; // this is valid
		g(i, y);
		// g(i); // a function g with 2 parameters does not exist in scope
	}
}

class test
{
	public int f(){}
	public int i;
	public int[] ii;
	public test d;
	public int doThis(int a, int b, char c)
	{
		return i;
	}
	test()
	{
		d = null;
		ii = null;
		// this = d; // test this = test d
		// test = null; // variable test not defined
		i = f();
		doThis(1,2,'d'); // function doThis() not defined
	}
}

class c2
{
	public c3 stored;
	public c3 g()
	{
		c3 x = new c3();
		stored = x;
		return x;
	}

	c2(int xIn)
	{
	
	}
}

class c3
{
	public int y = 1;
	private int z = 0;
	
	c3()
	{
		y = 2;
	}
}

class testClass
{
	public int x;
}

class testClass2
{
	public int x;
}

class MathClass
{
	public int mult(int x, int y)
	{
		return x * y + 2 * 4;
		this = null;
		this = new MathClass();
		// this = new arrClass(); // This will fail due to mismatched types
	}

	public char multiParam(int x, bool y)
	{
		char c;
		return c;
	}

	MathClass()
	{
	
	}
}

class arrClass
{	
	private char[] xArr;
	arrClass()
	{
		xArr = new char[3];
	}
}

void kxi2021 main()
{
	// char c = this; // variable this not defined
	char c = 'a';
	int x = 0;
	int y = 1;
	int g = 2;
	int f = 3;
	int i = 2;
	
	bool b;
	bool b1;
	bool b2;
	testClass tester;	
	testClass2 tester2;
	MathClass tester3;	
	c1 longie;
	int[] xArr = new int[g];
	c1[] cArr = new c1[g];
	// c4[] err = new c4[2]; // array c4 not degined
	// c1[] ErrArr = new c2[g];
	arrClass testClassArr;
	// c4 test;

	x = y;
	// x = 0 < b1;
	xArr[1] = x;
	// b1 = null or b1;
	b1 = 1 != 0;
	// x = xArr; // This will fail because an array cant be assigned to an int	
	// x = x != xArr; // This will fail because an array cant be assigned to an int
	// xArr = x; // This will fail because an array cant be assigned to an int
	xArr[0] = 0;
	// xArr[true] = x; // Invalid access type
	// xarr[0] = new int[4]; //  Invalid assignment type
	xArr = new int[4];
	// c1 failNew = new c1(); // This should fail because c1 has no constructor
	xArr = null;

	x = y * y * y + f * f / g - x; // Test that it is valid (Check EoE for correct temps)	
	b = y * 3 + 1 * 4 < g - 2 * 3 - 7 + 9; // Test that it is valid (Check EoE for correct temps)	
	// b = b + b; // This should be invalid
	b1 = x < y and b2;
	b1 = x < y or b2;
	b1 = x + 1 < y and b2;
	b1 = x + 1 < y * 2 and b2;
	b1 = true;
	b1 = false;
	c = 'a';
	// x = 'a'; // This should fail
	tester.x = 1;	
	// tester.y = 1; // This should fail
	tester.x = tester2.x;

	x = x * (2 + 3);

	x = tester3.mult(x,y+1);
	
	x = tester3.mult(x,y+1) + 2 * 3;
	// b1 = tester3.mult(x,y); // This should fail

	longie.f().g().y = 1;
	// longie.f().g().x = 1; // x doesnt exist	
	// longie.f().g().z = 1; // z is private

	tester3.multiParam(y * 7, g < f);
	
	// tester3.multiParam(); // This will fail for mismatched param
	// tester3.multiParam(y * 7); // This will fail for mismatched param
	// tester3.multiParam(y < 7, g < f); // This will fail mismatched params
	// tester3.multiParam(y * 7, g * f); // This will fail
	xArr[x + 1] = xArr[x * 2 / 3]; 
	// xArr[x + 1] = xArr[outOfScope + 2]; // This will fail because outOfScope is not declared in scope 
	testClassArr.xArr[i] = testClassArr.xArr[i + 1];
	// testClassArr.xArr[i] = longie.outOfScope; // This will fail becauses outOfScope is an int and testClassArr.xArr[i] is a char
	testClassArr.xArr[0] = 'a';

	switch(c == 'a')
	{
		case 'a': 
		{
			(x+y);
			break;
		}
		
		default: break;
	}
	

	cin >> x;
	// cin >> 1; // This will fail because 1 is not a proper Lvalue
	cout << 1 + 2;
	cout << 'a';
	if(b1)
	{
		cout << 'b';
		cout << x + 1;
	}

	if(x == 10)
	{
		// cout << b1; // cout not defined for bool
	}

	// if(x){cout << b1;} // invalid expression for if

	while(x < 10)
	{
		cout << 'x';
		x = x + 1;
	}

	// while(x){cout << b1;} // invalid expression for if

	// while(x * 3){cout << b1;} // invalid expression for if

	this.x = 0;
	// this.z = null; // this will fail because z is not declared	
	// this = null; // this will fail because this is not a proper scope
	// cArr = xArr; // This will fail because the array types are different
}
